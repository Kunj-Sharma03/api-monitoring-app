const PDFDocument = require('pdfkit');
const fs = require('fs');
const path = require('path');
const logoPath = path.join(__dirname, '../../frontend/public/logo192.png');

function formatDateForFilename(date) {
  return date.getFullYear() + '-' +
    String(date.getMonth() + 1).padStart(2, '0') + '-' +
    String(date.getDate()).padStart(2, '0') + '_' +
    String(date.getHours()).padStart(2, '0') + '-' +
    String(date.getMinutes()).padStart(2, '0') + '-' +
    String(date.getSeconds()).padStart(2, '0');
}

function generateAlertPDF({ monitor, status, logDetails, prevStatus }) {
  return new Promise((resolve, reject) => {
    try {
      const doc = new PDFDocument({ margin: 40 });
      const now = new Date();
      const fileName = `alert-${formatDateForFilename(now)}.pdf`;
      const dirPath = path.join(__dirname, '../temp');
      const filePath = path.join(dirPath, fileName);
      if (!fs.existsSync(dirPath)) fs.mkdirSync(dirPath);

      const stream = fs.createWriteStream(filePath);
      doc.pipe(stream);

      // Colors
      const sidebarColor = '#18181b';
      const primaryColor = '#3b82f6';
      const textPrimary = '#18181b';
      const textSecondary = '#6b7280';
      const surfaceColor = '#f9fafb';
      const errorColor = '#ef4444';

      // Header
      doc.save();
      doc.rect(0, 0, doc.page.width, 70).fill(sidebarColor);
      if (fs.existsSync(logoPath)) {
        doc.image(logoPath, doc.page.width - 90, 18, { width: 40, height: 40 });
      }
      doc.fillColor(primaryColor)
        .font('Helvetica-Bold')
        .fontSize(22)
        .text('API Monitor Alert', 40, 28, { align: 'left' });
      doc.restore();

      doc.moveDown(2);

      // Info card
      doc.save();
      doc.roundedRect(doc.x - 10, doc.y - 5, 480, 90, 12).fill(surfaceColor).stroke();
      doc.fillColor(textPrimary)
        .font('Helvetica-Bold').fontSize(13)
        .text(`Monitor: `, doc.x + 10, doc.y + 10, { continued: true })
        .font('Helvetica').text(monitor.name || monitor.url || 'Unnamed');
      doc.fillColor(textSecondary)
        .font('Helvetica').fontSize(11)
        .text(`URL: ${monitor.url}`)
        .text(`Checked: ${now.toLocaleString()}`)
        .text(`Status: `, { continued: true })
        .fillColor(status === 'DOWN' ? errorColor : primaryColor)
        .font('Helvetica-Bold').text(status);
      doc.restore();

      doc.moveDown(2);

      // Details
      doc.font('Helvetica-Bold').fontSize(13).fillColor(primaryColor).text('Details', { underline: true });
      doc.moveDown(0.5);
      const details = [
        ['Monitor ID', monitor.id],
        ['Previous Status', prevStatus || 'N/A'],
        ['HTTP Code', logDetails.statusCode],
        ['Response Time', `${logDetails.responseTime} ms`],
        ['Reason', `Status changed from ${prevStatus || 'N/A'} to ${status}`],
      ];
      details.forEach(([label, value]) => {
        doc.fillColor(textSecondary).font('Helvetica-Bold').fontSize(11).text(label + ':', { continued: true });
        doc.fillColor(textPrimary).font('Helvetica').fontSize(11).text(' ' + value);
      });

      // Error message highlight (only if there's an error)
      if (logDetails.statusCode >= 400 || status === 'DOWN') {
        doc.moveDown(0.5);
        doc.font('Helvetica-Bold').fontSize(12).fillColor(errorColor).text('Error/Issue:', { underline: true });
        if (logDetails.errorMessage) {
          doc.font('Helvetica').fontSize(11).fillColor(errorColor).text(logDetails.errorMessage);
        }
      }

      // Calculate remaining space and position footer at the absolute bottom
      const footerText = 'Generated by API Monitoring App â€¢ ' + now.toLocaleString();
      const currentY = doc.y;
      const pageHeight = doc.page.height;
      const footerY = pageHeight - 60; // 60px from bottom

      // Only draw footer if we have enough space, otherwise skip extra content
      if (currentY < footerY - 20) {
        doc.save();
        doc.font('Helvetica').fontSize(9).fillColor(textSecondary)
          .text(footerText, 40, footerY, { align: 'center', width: doc.page.width - 80 });
        doc.restore();
      }

      doc.end();

      stream.on('finish', () => resolve(filePath));
      stream.on('error', reject);
    } catch (err) {
      reject(err);
    }
  });
}

module.exports = { generateAlertPDF };
