const PDFDocument = require('pdfkit');
const fs = require('fs');
const path = require('path');

function generateAlertPDF({ monitor, status, logDetails, prevStatus }) {
  const doc = new PDFDocument({ margin: 50 });
  const fileName = `alert-${monitor.id}-${Date.now()}.pdf`;
  const dirPath = path.join(__dirname, '../temp');
  const filePath = path.join(dirPath, fileName);
  if (!fs.existsSync(dirPath)) fs.mkdirSync(dirPath);

  const stream = fs.createWriteStream(filePath);
  doc.pipe(stream);

  // Reusable colors & layout values
  const bgColor = '#f8f1ff';
  const footerHeight = 40;
  const footerText = 'Generated by API Monitoring System • ' + new Date().toUTCString();

  // Function to draw footer at the bottom of the current page
  function drawFooter() {
    const { width, height, margins } = doc.page;
    const y = height - margins.bottom - footerHeight;
    doc.save();
    doc.rect(0, y, width, footerHeight).fill(bgColor);
    doc.fillColor('black')
       .font('Helvetica')
       .fontSize(10)
       .text(footerText, 0, y + 12, { align: 'center', width });
    doc.restore();
  }

  // Whenever a new page is added, draw footer there too
  doc.on('pageAdded', drawFooter);

  // ——— HEADER ———
  doc.save();
  doc.rect(0, 0, doc.page.width, 80).fill(bgColor);
  doc.fillColor('black')
     .font('Helvetica-Bold')
     .fontSize(22)
     .text('API Monitor Alert!!!', 50, 30, { align: 'left' });
  doc.restore();

  doc.moveDown(2);

  // ——— MAIN INFO BOX ———
  doc.save();
  doc.rect(doc.x - 10, doc.y - 5, 500, 110).fill(bgColor).stroke();
  doc.fillColor('black')
     .font('Helvetica')
     .fontSize(12)
     .text(`Monitor Name: ${monitor.name || 'Unnamed'}`, doc.x + 5, doc.y + 5)
     .text(`URL: ${monitor.url}`)
     .text(`Checked At (UTC): ${new Date().toISOString()}`)
     .text(`Status Change: ${prevStatus || 'N/A'} ➝ ${status}`);
  doc.restore();

  doc.moveDown(2);

  // ——— DETAILS TABLE ———
  doc.fillColor('black')
     .font('Helvetica-Bold')
     .fontSize(14)
     .text('Monitor Details:', { underline: true });
  doc.moveDown(0.5);

  const labelWidth = 160;
  const valueX = doc.x + labelWidth;
  const rows = [
    ['Monitor ID:', monitor.id],
    ['URL:', monitor.url],
    ['Current Status:', status],
    ['Previous Status:', prevStatus || 'N/A'],
    ['HTTP Code:', logDetails.statusCode],
    ['Response Time:', `${logDetails.responseTime} ms`],
    ['Reason:', `Status changed from ${prevStatus || 'N/A'} to ${status}`],
  ];
  rows.forEach(([label, value]) => {
    doc.fillColor('black').font('Helvetica-Bold').text(label, doc.x, doc.y);
    doc.font('Helvetica').text(value, valueX, doc.y);
    doc.moveDown(0.5);
  });

  // make sure footer is added on the first page
  drawFooter();

  doc.end();

  return new Promise((resolve, reject) => {
    stream.on('finish', () => resolve(filePath));
    stream.on('error', reject);
  });
}

module.exports = generateAlertPDF;
